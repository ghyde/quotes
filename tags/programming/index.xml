<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Favorite Quotes</title>
    <link>/tags/programming/</link>
    <description>Recent content in Programming on Favorite Quotes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithms</title>
      <link>/posts/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/algorithms/</guid>
      <description>I&amp;rsquo;m very aware that the word &amp;ldquo;algorithm&amp;rdquo; makes about 85% of people want to gouge their own eyes, right? But I mentioned this at a tech conference that I was at to someone, and they agreed with me. But they added that it makes the remaining 15% of people mildly aroused.
&amp;ndash; Hannah Fry (source)</description>
    </item>
    
    <item>
      <title>All Language Designers Are Arrogant</title>
      <link>/posts/all-language-designers-are-arrogant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/all-language-designers-are-arrogant/</guid>
      <description>All language designers are arrogant. Goes with the territory&amp;hellip; :-)
&amp;ndash; Larry Wall (1991Jul13.010945.19157@netlabs.com)</description>
    </item>
    
    <item>
      <title>Art Form That Fights Back</title>
      <link>/posts/art-form-that-fights-back/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/art-form-that-fights-back/</guid>
      <description>Programming is an art form that fights back.
&amp;ndash; Unknown (source)</description>
    </item>
    
    <item>
      <title>Become Managers</title>
      <link>/posts/become-managers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/become-managers/</guid>
      <description>Programmers who refuse to keep exploring will stagnate, forget their joy and lose the will to program (and become managers).
&amp;ndash; M Haverbeke (source)</description>
    </item>
    
    <item>
      <title>Code Addict</title>
      <link>/posts/code-addict/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/code-addict/</guid>
      <description>When a code addict needs a fix, they just do a few extra lines.</description>
    </item>
    
    <item>
      <title>Computer Programs</title>
      <link>/posts/computer-programs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/computer-programs/</guid>
      <description>Computer programs are the most complex things that humans make.
&amp;ndash; Douglas Crockford (source)</description>
    </item>
    
    <item>
      <title>Computer Science Is A Liberal Art</title>
      <link>/posts/computer-science-is-a-liberal-art/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/computer-science-is-a-liberal-art/</guid>
      <description>Learning to program teaches you how to think. Computer science is a liberal art.
&amp;ndash; Steve Jobs (source)</description>
    </item>
    
    <item>
      <title>Creator of Universes</title>
      <link>/posts/creator-of-universes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/creator-of-universes/</guid>
      <description>The computer programmer is a creator of universes for which he alone is responsible.
&amp;ndash; Joseph Weizenbaum (source)</description>
    </item>
    
    <item>
      <title>Debugging Detective</title>
      <link>/posts/debugging-detective/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/debugging-detective/</guid>
      <description>Debugging is like being the detective in a crime movie where you are also the murderer.
&amp;ndash; Filipe Fortes (source)</description>
    </item>
    
    <item>
      <title>Give Someone A Program</title>
      <link>/posts/give-someone-a-program/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/give-someone-a-program/</guid>
      <description>Give someone a program, you frustrate them for a day; teach them how to program, you frustrate them for a lifetime.
&amp;ndash; David Leinweber (source)</description>
    </item>
    
    <item>
      <title>Guns Don&#39;t Kill People, Operator Overloading Does</title>
      <link>/posts/operator-overloading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/operator-overloading/</guid>
      <description>With regards to shooting oneself in the foot with complexity, &amp;ldquo;Guns don&amp;rsquo;t kill people, operator overloading does.&amp;rdquo;</description>
    </item>
    
    <item>
      <title>How do Hutts Program?</title>
      <link>/posts/how-do-hutts-program/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-do-hutts-program/</guid>
      <description>How do Hutts program their computers?
Jabba-script
&amp;ndash; @DepressedDarth (source)</description>
    </item>
    
    <item>
      <title>Id Software Principles</title>
      <link>/posts/id-software-principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/id-software-principles/</guid>
      <description>No prototypes. Just make the game. Polish as you go. Don&amp;rsquo;t depend on polish happening later. Always maintain constantly shippable code. It&amp;rsquo;s incredibly important that your game can always be run by your team. Bulletproof your engine by providing defaults upon load failure. Keep your code absolutely simple. Keep looking at your functions and figure out how you can simplify further. Great tools help make great games. Spend as much time on tools as possible.</description>
    </item>
    
    <item>
      <title>Machines &amp; People</title>
      <link>/posts/machines-and-people/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/machines-and-people/</guid>
      <description>Machines should work. People should think.
&amp;ndash; IBM commercial (source)</description>
    </item>
    
    <item>
      <title>Perl Before and After Encryption</title>
      <link>/posts/perl-before-and-after-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/perl-before-and-after-encryption/</guid>
      <description>Perl &amp;ndash; The only language that looks the same before and after RSA encryption.
&amp;ndash; Keith Bostic</description>
    </item>
    
    <item>
      <title>Programming In IRL</title>
      <link>/posts/programming-in-irl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/programming-in-irl/</guid>
      <description>Programming IRL:
&amp;ldquo;ETA for an apple pie?&amp;rdquo;
&amp;ldquo;2h&amp;rdquo;
8h later:
&amp;ldquo;Where is it?&amp;rdquo;
&amp;ldquo;You didn&amp;rsquo;t tell me the dishes were dirty and you lacked an oven.&amp;rdquo;
&amp;ndash; Rick Fillion (source)</description>
    </item>
    
    <item>
      <title>Python - &#34;import *&#34;</title>
      <link>/posts/python-import-star/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/python-import-star/</guid>
      <description>Put &amp;ldquo;True, False = False, True&amp;rdquo; into your python libraries. People will soon learn to not &amp;ldquo;import *&amp;rdquo; from them&amp;hellip;
&amp;ndash; The Rev Johnny Healey (source)</description>
    </item>
    
    <item>
      <title>Software Complexity</title>
      <link>/posts/software-complexity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/software-complexity/</guid>
      <description>So much complexity in software comes from trying to make one thing do two things.
&amp;ndash; Ryan Singer (source)</description>
    </item>
    
    <item>
      <title>Solving Problems</title>
      <link>/posts/solving-problems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/solving-problems/</guid>
      <description>In programming, the hard part isn&amp;rsquo;t solving problems, but deciding what problems to solve.
&amp;ndash; Paul Graham (source)</description>
    </item>
    
    <item>
      <title>Someone Else&#39;s Responsibility</title>
      <link>/posts/someone-elses-responsibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/someone-elses-responsibility/</guid>
      <description>Algorithmic complexity for structured programmers: All algorithms are O(f(n)), where f is someone else&amp;rsquo;s responsibility.
&amp;ndash; Peter Cooper (source)</description>
    </item>
    
    <item>
      <title>Specs</title>
      <link>/posts/specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/specs/</guid>
      <description>Writing specs is like flossing: everybody agrees that it&amp;rsquo;s a good thing, but nobody does it.
&amp;ndash; Joel Spolsky (source)</description>
    </item>
    
    <item>
      <title>The Quality Of Programmers</title>
      <link>/posts/quality-of-programmers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/quality-of-programmers/</guid>
      <description>The quality of programmers is a decreasing function of the density of go to statements in the programs they produce.
&amp;ndash; Dijkstra</description>
    </item>
    
    <item>
      <title>The Sooner You Start To Codeâ€¦</title>
      <link>/posts/the-sooner-you-start-to-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/the-sooner-you-start-to-code/</guid>
      <description>The sooner you start to code, the longer the program will take.
&amp;ndash; Roy Carlson, University of Wisconsin (source)</description>
    </item>
    
  </channel>
</rss>
